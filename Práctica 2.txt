// Interfaz Lista<T>
public interface Lista<T> {
    boolean add(T elemento);
    boolean delete(T elemento);
    Iterador<T> getIterador();
    int getNumElementos();
}


// Clase Elemento<T> para la lista simplemente enlazada
class Elemento<T> {
    T dato;
    Elemento<T> siguiente;


    public Elemento(T dato) {
        this.dato = dato;
        this.siguiente = null;
    }
}


// Implementación de la lista simplemente enlazada
class ListaSimplementeEnlazada<T> implements Lista<T> {
    private Elemento<T> cabeza;
    private int size;


    public ListaSimplementeEnlazada() {
        this.cabeza = null;
        this.size = 0;
    }


    @Override
    public boolean add(T elemento) {
        Elemento<T> nuevo = new Elemento<>(elemento);
        if (cabeza == null) {
            cabeza = nuevo;
        } else {
            Elemento<T> actual = cabeza;
            while (actual.siguiente != null) {
                actual = actual.siguiente;
            }
            actual.siguiente = nuevo;
        }
        size++;
        return true;
    }


    @Override
    public boolean delete(T elemento) {
        if (cabeza == null) {
            return false;
        }
        if (cabeza.dato.equals(elemento)) {
            cabeza = cabeza.siguiente;
            size--;
            return true;
        }
        Elemento<T> actual = cabeza;
        while (actual.siguiente != null && !actual.siguiente.dato.equals(elemento)) {
            actual = actual.siguiente;
        }
        if (actual.siguiente != null) {
            actual.siguiente = actual.siguiente.siguiente;
            size--;
            return true;
        }
        return false;
    }


    @Override
    public Iterador<T> getIterador() {
        return new IteradorListaSimplementeEnlazada();
    }


    @Override
    public int getNumElementos() {
        return size;
    }


    // Implementación del iterador para la lista simplemente enlazada
    private class IteradorListaSimplementeEnlazada implements Iterador<T> {
        private Elemento<T> actual = cabeza;
        private Elemento<T> previo = null;


        @Override
        public boolean hasNext() {
            return actual != null;
        }


        @Override
        public T next() {
            if (!hasNext()) {
                throw new IllegalStateException("No hay más elementos");
            }
            T dato = actual.dato;
            previo = actual;
            actual = actual.siguiente;
            return dato;
        }


        @Override
        public void delete() {
            if (previo == null) {
                throw new IllegalStateException("Llamar a next() antes de eliminar");
            }
            ListaSimplementeEnlazada.this.delete(previo.dato);
            previo = null;
        }
    }
}


// Interfaz de Iterador<T>
interface Iterador<T> {
    boolean hasNext();
    T next();
    void delete();
}