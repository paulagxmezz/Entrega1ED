// Interfaz Lista<T>
public interface Lista<T> {
    boolean add(T elemento);
    boolean delete(T elemento);
    Iterador<T> getIterador();
    int getNumElementos();
}


// Implementación de Lista con array dinámico
class ListaArray<T> implements Lista<T> {
    private Object[] elementos;
    private int size;
    private static final int CAPACIDAD_INICIAL = 10;


    public ListaArray() {
        this.elementos = new Object[CAPACIDAD_INICIAL];
        this.size = 0;
    }


    @Override
    public boolean add(T elemento) {
        if (size == elementos.length) {
            expandirCapacidad();
        }
        elementos[size++] = elemento;
        return true;
    }


    @Override
    public boolean delete(T elemento) {
        for (int i = 0; i < size; i++) {
            if (elementos[i].equals(elemento)) {
                System.arraycopy(elementos, i + 1, elementos, i, size - i - 1);
                size--;
                return true;
            }
        }
        return false;
    }


    @Override
    public Iterador<T> getIterador() {
        return new ListaIterador();
    }


    @Override
    public int getNumElementos() {
        return size;
    }


    private void expandirCapacidad() {
        Object[] nuevoArray = new Object[elementos.length * 2];
        System.arraycopy(elementos, 0, nuevoArray, 0, elementos.length);
        elementos = nuevoArray;
    }


    // Implementación del iterador interno
    private class ListaIterador implements Iterador<T> {
        private int indice = 0;
        private int lastIndex = -1;


        @Override
        public boolean hasNext() {
            return indice < size;
        }


        @Override
        public T next() {
            if (!hasNext()) {
                throw new IllegalStateException("No hay más elementos");
            }
            lastIndex = indice;
            return (T) elementos[indice++];
        }


        @Override
        public void delete() {
            if (lastIndex == -1) {
                throw new IllegalStateException("Llamar a next() antes de eliminar");
            }
            System.arraycopy(elementos, lastIndex + 1, elementos, lastIndex, size - lastIndex - 1);
            size--;
            indice = lastIndex;
            lastIndex = -1;
        }
    }
}


// Interfaz de Iterador<T>
interface Iterador<T> {
    boolean hasNext();
    T next();
    void delete();
}